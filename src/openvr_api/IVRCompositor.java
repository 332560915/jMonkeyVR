package openvr_api;
import openvr_api.IOpenvr_api.Compositor_DeviceType;
import openvr_api.IOpenvr_api.Hmd_Eye;
import openvr_api.IOpenvr_api.TrackingUniverseOrigin;
import org.bridj.BridJ;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Namespace;
import org.bridj.ann.Ptr;
import org.bridj.ann.Virtual;
import org.bridj.cpp.CPPObject;
/**
 * Allows the application to interact with the compositor<br>
 * <i>native declaration : /usr/include/stdint.h:1115</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Name("IVRCompositor") 
@Namespace("vr") 
@Library("openvr_api") 
public class IVRCompositor extends CPPObject {
	static {
		BridJ.register();
	}
        
	/**
	 * Original signature : <code>uint32_t GetLastError(char*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1119</i>
	 */
	@Name("GetLastError") 
	@Virtual(0) 
	public int getLastError(Pointer<Byte > pchBuffer, int unBufferSize) {
		return getLastError(Pointer.getPeer(pchBuffer), unBufferSize);
	}
	@Name("GetLastError") 
	@Virtual(0) 
	protected native int getLastError(@Ptr long pchBuffer, int unBufferSize);
	/**
	 * Original signature : <code>void SetVSync(bool)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1122</i>
	 */
	@Name("SetVSync") 
	@Virtual(1) 
	public native void setVSync(boolean bVSync);
	/**
	 * Original signature : <code>bool GetVSync()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1125</i>
	 */
	@Name("GetVSync") 
	@Virtual(2) 
	public native boolean getVSync();
	/**
	 * Original signature : <code>void SetGamma(float)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1128</i>
	 */
	@Name("SetGamma") 
	@Virtual(3) 
	public native void setGamma(float fGamma);
	/**
	 * Original signature : <code>float GetGamma()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1131</i>
	 */
	@Name("GetGamma") 
	@Virtual(4) 
	public native float getGamma();
	/**
	 * Original signature : <code>void SetGraphicsDevice(Compositor_DeviceType, void*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1144</i>
	 */
	@Name("SetGraphicsDevice") 
	@Virtual(5) 
	public void setGraphicsDevice(IntValuedEnum<Compositor_DeviceType > eType, Pointer<? > pDevice) {
		setGraphicsDevice((int)eType.value(), Pointer.getPeer(pDevice));
	}
	@Name("SetGraphicsDevice") 
	@Virtual(5) 
	protected native void setGraphicsDevice(int eType, @Ptr long pDevice);
	/**
	 * Original signature : <code>void WaitGetPoses(TrackedDevicePose_t*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1147</i>
	 */
	@Name("WaitGetPoses") 
	@Virtual(6) 
	public void waitGetPoses(Pointer<TrackedDevicePose_t > pPoseArray, int unPoseArrayCount) {
		waitGetPoses(Pointer.getPeer(pPoseArray), unPoseArrayCount);
	}
	@Name("WaitGetPoses") 
	@Virtual(6) 
	protected native void waitGetPoses(@Ptr long pPoseArray, int unPoseArrayCount);
	/**
	 * Original signature : <code>void Submit(Hmd_Eye, void*, Compositor_TextureBounds*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1154</i>
	 */
	@Name("Submit") 
	@Virtual(7) 
	public void submit(IntValuedEnum<Hmd_Eye > eEye, Pointer<? > pTexture, Pointer<Compositor_TextureBounds > pBounds) {
		submit((int)eEye.value(), Pointer.getPeer(pTexture), Pointer.getPeer(pBounds));
	}
	@Name("Submit") 
	@Virtual(7) 
	protected native void submit(int eEye, @Ptr long pTexture, @Ptr long pBounds);
	/**
	 * Original signature : <code>void ClearLastSubmittedFrame()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1158</i>
	 */
	@Name("ClearLastSubmittedFrame") 
	@Virtual(8) 
	public native void clearLastSubmittedFrame();
	/**
	 * Original signature : <code>void GetOverlayDefaults(Compositor_OverlaySettings*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1162</i>
	 */
	@Name("GetOverlayDefaults") 
	@Virtual(9) 
	public void getOverlayDefaults(Pointer<Compositor_OverlaySettings > pSettings) {
		getOverlayDefaults(Pointer.getPeer(pSettings));
	}
	@Name("GetOverlayDefaults") 
	@Virtual(9) 
	protected native void getOverlayDefaults(@Ptr long pSettings);
	/**
	 * Original signature : <code>void SetOverlay(void*, Compositor_OverlaySettings*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1166</i>
	 */
	@Name("SetOverlay") 
	@Virtual(10) 
	public void setOverlay(Pointer<? > pTexture, Pointer<Compositor_OverlaySettings > pSettings) {
		setOverlay(Pointer.getPeer(pTexture), Pointer.getPeer(pSettings));
	}
	@Name("SetOverlay") 
	@Virtual(10) 
	protected native void setOverlay(@Ptr long pTexture, @Ptr long pSettings);
	/**
	 * Original signature : <code>void SetOverlayRaw(void*, uint32_t, uint32_t, uint32_t, Compositor_OverlaySettings*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1169</i>
	 */
	@Name("SetOverlayRaw") 
	@Virtual(11) 
	public void setOverlayRaw(Pointer<? > buffer, int width, int height, int depth, Pointer<Compositor_OverlaySettings > pSettings) {
		setOverlayRaw(Pointer.getPeer(buffer), width, height, depth, Pointer.getPeer(pSettings));
	}
	@Name("SetOverlayRaw") 
	@Virtual(11) 
	protected native void setOverlayRaw(@Ptr long buffer, int width, int height, int depth, @Ptr long pSettings);
	/**
	 * Original signature : <code>void SetOverlayFromFile(const char*, Compositor_OverlaySettings*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1173</i>
	 */
	@Name("SetOverlayFromFile") 
	@Virtual(12) 
	public void setOverlayFromFile(Pointer<Byte > pchFilePath, Pointer<Compositor_OverlaySettings > pSettings) {
		setOverlayFromFile(Pointer.getPeer(pchFilePath), Pointer.getPeer(pSettings));
	}
	@Name("SetOverlayFromFile") 
	@Virtual(12) 
	protected native void setOverlayFromFile(@Ptr long pchFilePath, @Ptr long pSettings);
	/**
	 * Original signature : <code>void ClearOverlay()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1176</i>
	 */
	@Name("ClearOverlay") 
	@Virtual(13) 
	public native void clearOverlay();
	/**
	 * Original signature : <code>bool GetFrameTiming(Compositor_FrameTiming*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1180</i>
	 */
	@Name("GetFrameTiming") 
	@Virtual(14) 
	public boolean getFrameTiming(Pointer<Compositor_FrameTiming > pTiming, int unFramesAgo) {
		return getFrameTiming(Pointer.getPeer(pTiming), unFramesAgo);
	}
	@Name("GetFrameTiming") 
	@Virtual(14) 
	protected native boolean getFrameTiming(@Ptr long pTiming, int unFramesAgo);
	/**
	 * Original signature : <code>void FadeToColor(float, float, float, float, float, bool)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1185</i>
	 */
	@Name("FadeToColor") 
	@Virtual(15) 
	public native void fadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, boolean bBackground);
	/**
	 * Original signature : <code>void FadeGrid(float, bool)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1188</i>
	 */
	@Name("FadeGrid") 
	@Virtual(16) 
	public native void fadeGrid(float fSeconds, boolean bFadeIn);
	/**
	 * Original signature : <code>void CompositorBringToFront()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1192</i>
	 */
	@Name("CompositorBringToFront") 
	@Virtual(17) 
	public native void compositorBringToFront();
	/**
	 * Original signature : <code>void CompositorGoToBack()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1195</i>
	 */
	@Name("CompositorGoToBack") 
	@Virtual(18) 
	public native void compositorGoToBack();
	/**
	 * Original signature : <code>void CompositorQuit()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1199</i>
	 */
	@Name("CompositorQuit") 
	@Virtual(19) 
	public native void compositorQuit();
	/**
	 * Original signature : <code>bool IsFullscreen()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1202</i>
	 */
	@Name("IsFullscreen") 
	@Virtual(20) 
	public native boolean isFullscreen();
	/**
	 * Original signature : <code>bool ComputeOverlayIntersection(const Compositor_OverlaySettings*, float, vr::TrackingUniverseOrigin, vr::HmdVector3_t, vr::HmdVector3_t, vr::HmdVector2_t*, vr::HmdVector3_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1206</i>
	 */
	@Name("ComputeOverlayIntersection") 
	@Virtual(21) 
	public boolean computeOverlayIntersection(Pointer<Compositor_OverlaySettings > pSettings, float fAspectRatio, Pointer<TrackingUniverseOrigin> eOrigin, Pointer<HmdVector3_t> vSource, Pointer<HmdVector3_t> vDirection, Pointer<HmdVector2_t > pvecIntersectionUV, Pointer<HmdVector3_t > pvecIntersectionTrackingSpace) {
		return computeOverlayIntersection(Pointer.getPeer(pSettings), fAspectRatio, Pointer.getPeer(eOrigin), Pointer.getPeer(vSource), Pointer.getPeer(vDirection), Pointer.getPeer(pvecIntersectionUV), Pointer.getPeer(pvecIntersectionTrackingSpace));
	}
	@Name("ComputeOverlayIntersection") 
	@Virtual(21) 
	protected native boolean computeOverlayIntersection(@Ptr long pSettings, float fAspectRatio, @Ptr long eOrigin, @Ptr long vSource, @Ptr long vDirection, @Ptr long pvecIntersectionUV, @Ptr long pvecIntersectionTrackingSpace);
	/**
	 * Original signature : <code>void SetTrackingSpace(TrackingUniverseOrigin)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1209</i>
	 */
	@Name("SetTrackingSpace") 
	@Virtual(22) 
	public void setTrackingSpace(IntValuedEnum<openvr_api.Openvr_apiLibrary.TrackingUniverseOrigin > eOrigin) {
		setTrackingSpace((int)eOrigin.value());
	}
	@Name("SetTrackingSpace") 
	@Virtual(22) 
	protected native void setTrackingSpace(int eOrigin);
	/**
	 * Original signature : <code>TrackingUniverseOrigin GetTrackingSpace()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1212</i>
	 */
	@Name("GetTrackingSpace") 
	@Virtual(23) 
	public IntValuedEnum<openvr_api.Openvr_apiLibrary.TrackingUniverseOrigin > getTrackingSpace() {
		return FlagSet.fromValue(getTrackingSpace$2(), openvr_api.Openvr_apiLibrary.TrackingUniverseOrigin.class);
	}
	@Name("GetTrackingSpace") 
	@Virtual(23) 
	protected native int getTrackingSpace$2();
	public IVRCompositor() {
		super();
	}
	public IVRCompositor(Pointer pointer) {
		super(pointer);
	}
}
