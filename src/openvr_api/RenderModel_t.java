package openvr_api;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Namespace;
/**
 * Contains everything a game needs to render a single tracked or static object for the user.<br>
 * <i>native declaration : /usr/include/stdint.h:489</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Name("RenderModel_t") 
@Namespace("vr") 
@Library("openvr_api") 
public class RenderModel_t extends StructObject {
	static {
		BridJ.register();
	}
	/** Used internally by SteamVR */
	@Field(0) 
	public long ulInternalHandle() {
		return this.io.getLongField(this, 0);
	}
	/** Used internally by SteamVR */
	@Field(0) 
	public RenderModel_t ulInternalHandle(long ulInternalHandle) {
		this.io.setLongField(this, 0, ulInternalHandle);
		return this;
	}
	/**
	 * Vertex data for the mesh<br>
	 * C type : const RenderModel_Vertex_t*
	 */
	@Field(1) 
	public Pointer<RenderModel_Vertex_t > rVertexData() {
		return this.io.getPointerField(this, 1);
	}
	/**
	 * Vertex data for the mesh<br>
	 * C type : const RenderModel_Vertex_t*
	 */
	@Field(1) 
	public RenderModel_t rVertexData(Pointer<RenderModel_Vertex_t > rVertexData) {
		this.io.setPointerField(this, 1, rVertexData);
		return this;
	}
	/** Number of vertices in the vertex data */
	@Field(2) 
	public int unVertexCount() {
		return this.io.getIntField(this, 2);
	}
	/** Number of vertices in the vertex data */
	@Field(2) 
	public RenderModel_t unVertexCount(int unVertexCount) {
		this.io.setIntField(this, 2, unVertexCount);
		return this;
	}
	/**
	 * Indices into the vertex data for each triangle<br>
	 * C type : const uint16_t*
	 */
	@Field(3) 
	public Pointer<Short > rIndexData() {
		return this.io.getPointerField(this, 3);
	}
	/**
	 * Indices into the vertex data for each triangle<br>
	 * C type : const uint16_t*
	 */
	@Field(3) 
	public RenderModel_t rIndexData(Pointer<Short > rIndexData) {
		this.io.setPointerField(this, 3, rIndexData);
		return this;
	}
	/** Number of triangles in the mesh. Index count is 3 * TriangleCount */
	@Field(4) 
	public int unTriangleCount() {
		return this.io.getIntField(this, 4);
	}
	/** Number of triangles in the mesh. Index count is 3 * TriangleCount */
	@Field(4) 
	public RenderModel_t unTriangleCount(int unTriangleCount) {
		this.io.setIntField(this, 4, unTriangleCount);
		return this;
	}
	/**
	 * RGBA diffuse texture for the model<br>
	 * C type : RenderModel_TextureMap_t
	 */
	@Field(5) 
	public RenderModel_TextureMap_t diffuseTexture() {
		return this.io.getNativeObjectField(this, 5);
	}
	/**
	 * RGBA diffuse texture for the model<br>
	 * C type : RenderModel_TextureMap_t
	 */
	@Field(5) 
	public RenderModel_t diffuseTexture(RenderModel_TextureMap_t diffuseTexture) {
		this.io.setNativeObjectField(this, 5, diffuseTexture);
		return this;
	}
	public RenderModel_t() {
		super();
	}
	public RenderModel_t(Pointer pointer) {
		super(pointer);
	}
}
