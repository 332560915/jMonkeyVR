package openvr_api;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Namespace;
import org.bridj.ann.Ptr;
import org.bridj.ann.Virtual;
import org.bridj.cpp.CPPObject;
/**
 * <i>native declaration : /usr/include/stdint.h:1224</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Name("IVRControlPanel") 
@Namespace("vr") 
@Library("openvr_api") 
public class IVRControlPanel extends CPPObject {
	static {
		BridJ.register();
	}
	/**
	 * Original signature : <code>uint32_t GetDriverCount()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1233</i>
	 */
	@Name("GetDriverCount") 
	@Virtual(0) 
	public native int getDriverCount();
	/**
	 * Original signature : <code>uint32_t GetDriverId(uint32_t, char*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1238</i>
	 */
	@Name("GetDriverId") 
	@Virtual(1) 
	public int getDriverId(int unDriverIndex, Pointer<Byte > pchBuffer, int unBufferLen) {
		return getDriverId(unDriverIndex, Pointer.getPeer(pchBuffer), unBufferLen);
	}
	@Name("GetDriverId") 
	@Virtual(1) 
	protected native int getDriverId(int unDriverIndex, @Ptr long pchBuffer, int unBufferLen);
	/**
	 * Original signature : <code>uint32_t GetDriverDisplayCount(const char*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1245</i>
	 */
	@Name("GetDriverDisplayCount") 
	@Virtual(2) 
	public int getDriverDisplayCount(Pointer<Byte > pchDriverId) {
		return getDriverDisplayCount(Pointer.getPeer(pchDriverId));
	}
	@Name("GetDriverDisplayCount") 
	@Virtual(2) 
	protected native int getDriverDisplayCount(@Ptr long pchDriverId);
	/**
	 * Original signature : <code>uint32_t GetDriverDisplayId(const char*, uint32_t, char*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1250</i>
	 */
	@Name("GetDriverDisplayId") 
	@Virtual(3) 
	public int getDriverDisplayId(Pointer<Byte > pchDriverId, int unDisplayIndex, Pointer<Byte > pchBuffer, int unBufferLen) {
		return getDriverDisplayId(Pointer.getPeer(pchDriverId), unDisplayIndex, Pointer.getPeer(pchBuffer), unBufferLen);
	}
	@Name("GetDriverDisplayId") 
	@Virtual(3) 
	protected native int getDriverDisplayId(@Ptr long pchDriverId, int unDisplayIndex, @Ptr long pchBuffer, int unBufferLen);
	/**
	 * Original signature : <code>uint32_t GetDriverDisplayModelNumber(const char*, const char*, char*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1260</i>
	 */
	@Name("GetDriverDisplayModelNumber") 
	@Virtual(4) 
	public int getDriverDisplayModelNumber(Pointer<Byte > pchDriverId, Pointer<Byte > pchDisplayId, Pointer<Byte > pchBuffer, int unBufferLen) {
		return getDriverDisplayModelNumber(Pointer.getPeer(pchDriverId), Pointer.getPeer(pchDisplayId), Pointer.getPeer(pchBuffer), unBufferLen);
	}
	@Name("GetDriverDisplayModelNumber") 
	@Virtual(4) 
	protected native int getDriverDisplayModelNumber(@Ptr long pchDriverId, @Ptr long pchDisplayId, @Ptr long pchBuffer, int unBufferLen);
	/**
	 * Original signature : <code>uint32_t GetDriverDisplaySerialNumber(const char*, const char*, char*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1266</i>
	 */
	@Name("GetDriverDisplaySerialNumber") 
	@Virtual(5) 
	public int getDriverDisplaySerialNumber(Pointer<Byte > pchDriverId, Pointer<Byte > pchDisplayId, Pointer<Byte > pchBuffer, int unBufferLen) {
		return getDriverDisplaySerialNumber(Pointer.getPeer(pchDriverId), Pointer.getPeer(pchDisplayId), Pointer.getPeer(pchBuffer), unBufferLen);
	}
	@Name("GetDriverDisplaySerialNumber") 
	@Virtual(5) 
	protected native int getDriverDisplaySerialNumber(@Ptr long pchDriverId, @Ptr long pchDisplayId, @Ptr long pchBuffer, int unBufferLen);
	/**
	 * Original signature : <code>IVRSystem* GetCurrentDisplayInterface(const char*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1271</i>
	 */
	@Name("GetCurrentDisplayInterface") 
	@Virtual(6) 
	public Pointer<IVRSystem > getCurrentDisplayInterface(Pointer<Byte > pchHmdInterfaceVersion) {
		return (Pointer)Pointer.pointerToAddress(getCurrentDisplayInterface(Pointer.getPeer(pchHmdInterfaceVersion)), IVRSystem.class);
	}
	@Name("GetCurrentDisplayInterface") 
	@Ptr 
	@Virtual(6) 
	protected native long getCurrentDisplayInterface(@Ptr long pchHmdInterfaceVersion);
	/**
	 * Original signature : <code>uint32_t LoadSharedResource(const char*, char*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1279</i>
	 */
	@Name("LoadSharedResource") 
	@Virtual(7) 
	public int loadSharedResource(Pointer<Byte > pchResourceName, Pointer<Byte > pchBuffer, int unBufferLen) {
		return loadSharedResource(Pointer.getPeer(pchResourceName), Pointer.getPeer(pchBuffer), unBufferLen);
	}
	@Name("LoadSharedResource") 
	@Virtual(7) 
	protected native int loadSharedResource(@Ptr long pchResourceName, @Ptr long pchBuffer, int unBufferLen);
	/**
	 * Original signature : <code>float GetIPD()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1286</i>
	 */
	@Name("GetIPD") 
	@Virtual(8) 
	public native float getIPD();
	/**
	 * Original signature : <code>void SetIPD(float)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1289</i>
	 */
	@Name("SetIPD") 
	@Virtual(9) 
	public native void setIPD(float fIPD);
	/**
	 * Original signature : <code>IVRCompositor* GetCurrentCompositorInterface(const char*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1297</i>
	 */
	@Name("GetCurrentCompositorInterface") 
	@Virtual(10) 
	public Pointer<IVRCompositor > getCurrentCompositorInterface(Pointer<Byte > pchInterfaceVersion) {
		return (Pointer)Pointer.pointerToAddress(getCurrentCompositorInterface(Pointer.getPeer(pchInterfaceVersion)), IVRCompositor.class);
	}
	@Name("GetCurrentCompositorInterface") 
	@Ptr 
	@Virtual(10) 
	protected native long getCurrentCompositorInterface(@Ptr long pchInterfaceVersion);
	public IVRControlPanel() {
		super();
	}
	public IVRControlPanel(Pointer pointer) {
		super(pointer);
	}
}
