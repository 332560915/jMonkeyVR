package openvr_api;
import openvr_api.IOpenvr_api.EVRButtonId;
import openvr_api.IOpenvr_api.EVRControllerAxisType;
import openvr_api.IOpenvr_api.EVRControllerEventOutputType;
import openvr_api.IOpenvr_api.EVREventType;
import openvr_api.IOpenvr_api.GraphicsAPIConvention;
import openvr_api.IOpenvr_api.Hmd_Eye;
import openvr_api.IOpenvr_api.TrackedDeviceClass;
import openvr_api.IOpenvr_api.TrackedDeviceIndex_t;
import openvr_api.IOpenvr_api.TrackedDeviceProperty;
import openvr_api.IOpenvr_api.TrackedPropertyError;
import openvr_api.IOpenvr_api.TrackingUniverseOrigin;
import openvr_api.IOpenvr_api.VRControllerState_t;
import org.bridj.BridJ;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Namespace;
import org.bridj.ann.Ptr;
import org.bridj.ann.Virtual;
import org.bridj.cpp.CPPObject;
/**
 * <i>native declaration : /usr/include/stdint.h:746</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Name("IVRSystem") 
@Namespace("vr") 
@Library("openvr_api") 
public class IVRSystem extends CPPObject {
	static {
		BridJ.register();
	}
	/**
	 * Original signature : <code>void GetWindowBounds(int32_t*, int32_t*, uint32_t*, uint32_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:756</i>
	 */
	@Name("GetWindowBounds") 
	@Virtual(0) 
	public void getWindowBounds(Pointer<Integer > pnX, Pointer<Integer > pnY, Pointer<Integer > pnWidth, Pointer<Integer > pnHeight) {
		getWindowBounds(Pointer.getPeer(pnX), Pointer.getPeer(pnY), Pointer.getPeer(pnWidth), Pointer.getPeer(pnHeight));
	}
	@Name("GetWindowBounds") 
	@Virtual(0) 
	protected native void getWindowBounds(@Ptr long pnX, @Ptr long pnY, @Ptr long pnWidth, @Ptr long pnHeight);
	/**
	 * Original signature : <code>void GetRecommendedRenderTargetSize(uint32_t*, uint32_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:759</i>
	 */
	@Name("GetRecommendedRenderTargetSize") 
	@Virtual(1) 
	public void getRecommendedRenderTargetSize(Pointer<Integer > pnWidth, Pointer<Integer > pnHeight) {
		getRecommendedRenderTargetSize(Pointer.getPeer(pnWidth), Pointer.getPeer(pnHeight));
	}
	@Name("GetRecommendedRenderTargetSize") 
	@Virtual(1) 
	protected native void getRecommendedRenderTargetSize(@Ptr long pnWidth, @Ptr long pnHeight);
	/**
	 * Original signature : <code>void GetEyeOutputViewport(Hmd_Eye, uint32_t*, uint32_t*, uint32_t*, uint32_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:762</i>
	 */
	@Name("GetEyeOutputViewport") 
	@Virtual(2) 
	public void getEyeOutputViewport(IntValuedEnum<Hmd_Eye > eEye, Pointer<Integer > pnX, Pointer<Integer > pnY, Pointer<Integer > pnWidth, Pointer<Integer > pnHeight) {
		getEyeOutputViewport((int)eEye.value(), Pointer.getPeer(pnX), Pointer.getPeer(pnY), Pointer.getPeer(pnWidth), Pointer.getPeer(pnHeight));
	}
	@Name("GetEyeOutputViewport") 
	@Virtual(2) 
	protected native void getEyeOutputViewport(int eEye, @Ptr long pnX, @Ptr long pnY, @Ptr long pnWidth, @Ptr long pnHeight);
	/**
	 * Original signature : <code>HmdMatrix44_t GetProjectionMatrix(Hmd_Eye, float, float, GraphicsAPIConvention)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:765</i>
	 */
	@Name("GetProjectionMatrix") 
	@Virtual(3) 
	public HmdMatrix44_t getProjectionMatrix(IntValuedEnum<Hmd_Eye > eEye, float fNearZ, float fFarZ, IntValuedEnum<GraphicsAPIConvention > eProjType) {
		return getProjectionMatrix((int)eEye.value(), fNearZ, fFarZ, (int)eProjType.value());
	}
	@Name("GetProjectionMatrix") 
	@Virtual(3) 
	protected native HmdMatrix44_t getProjectionMatrix(int eEye, float fNearZ, float fFarZ, int eProjType);
	/**
	 * Original signature : <code>void GetProjectionRaw(Hmd_Eye, float*, float*, float*, float*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:769</i>
	 */
	@Name("GetProjectionRaw") 
	@Virtual(4) 
	public void getProjectionRaw(IntValuedEnum<Hmd_Eye > eEye, Pointer<Float > pfLeft, Pointer<Float > pfRight, Pointer<Float > pfTop, Pointer<Float > pfBottom) {
		getProjectionRaw((int)eEye.value(), Pointer.getPeer(pfLeft), Pointer.getPeer(pfRight), Pointer.getPeer(pfTop), Pointer.getPeer(pfBottom));
	}
	@Name("GetProjectionRaw") 
	@Virtual(4) 
	protected native void getProjectionRaw(int eEye, @Ptr long pfLeft, @Ptr long pfRight, @Ptr long pfTop, @Ptr long pfBottom);
	/**
	 * Original signature : <code>DistortionCoordinates_t ComputeDistortion(Hmd_Eye, float, float)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:773</i>
	 */
	@Name("ComputeDistortion") 
	@Virtual(5) 
	public DistortionCoordinates_t computeDistortion(IntValuedEnum<Hmd_Eye > eEye, float fU, float fV) {
		return computeDistortion((int)eEye.value(), fU, fV);
	}
	@Name("ComputeDistortion") 
	@Virtual(5) 
	protected native DistortionCoordinates_t computeDistortion(int eEye, float fU, float fV);
	/**
	 * Original signature : <code>HmdMatrix34_t GetEyeToHeadTransform(Hmd_Eye)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:779</i>
	 */
	@Name("GetEyeToHeadTransform") 
	@Virtual(6) 
	public HmdMatrix34_t getEyeToHeadTransform(IntValuedEnum<Hmd_Eye > eEye) {
		return getEyeToHeadTransform((int)eEye.value());
	}
	@Name("GetEyeToHeadTransform") 
	@Virtual(6) 
	protected native HmdMatrix34_t getEyeToHeadTransform(int eEye);
	/**
	 * Original signature : <code>bool GetTimeSinceLastVsync(float*, uint64_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:785</i>
	 */
	@Name("GetTimeSinceLastVsync") 
	@Virtual(7) 
	public boolean getTimeSinceLastVsync(Pointer<Float > pfSecondsSinceLastVsync, Pointer<Long > pulFrameCounter) {
		return getTimeSinceLastVsync(Pointer.getPeer(pfSecondsSinceLastVsync), Pointer.getPeer(pulFrameCounter));
	}
	@Name("GetTimeSinceLastVsync") 
	@Virtual(7) 
	protected native boolean getTimeSinceLastVsync(@Ptr long pfSecondsSinceLastVsync, @Ptr long pulFrameCounter);
	/**
	 * Original signature : <code>int32_t GetD3D9AdapterIndex()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:791</i>
	 */
	@Name("GetD3D9AdapterIndex") 
	@Virtual(8) 
	public native int getD3D9AdapterIndex();
	/**
	 * Original signature : <code>void GetDXGIOutputInfo(int32_t*, int32_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:797</i>
	 */
	@Name("GetDXGIOutputInfo") 
	@Virtual(9) 
	public void getDXGIOutputInfo(Pointer<Integer > pnAdapterIndex, Pointer<Integer > pnAdapterOutputIndex) {
		getDXGIOutputInfo(Pointer.getPeer(pnAdapterIndex), Pointer.getPeer(pnAdapterOutputIndex));
	}
	@Name("GetDXGIOutputInfo") 
	@Virtual(9) 
	protected native void getDXGIOutputInfo(@Ptr long pnAdapterIndex, @Ptr long pnAdapterOutputIndex);
	/**
	 * Original signature : <code>bool AttachToWindow(void*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:802</i>
	 */
	@Name("AttachToWindow") 
	@Virtual(10) 
	public boolean attachToWindow(Pointer<? > hWnd) {
		return attachToWindow(Pointer.getPeer(hWnd));
	}
	@Name("AttachToWindow") 
	@Virtual(10) 
	protected native boolean attachToWindow(@Ptr long hWnd);
	/**
	 * Original signature : <code>void GetDeviceToAbsoluteTrackingPose(TrackingUniverseOrigin, float, TrackedDevicePose_t*, uint32_t)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:825</i>
	 */
	@Name("GetDeviceToAbsoluteTrackingPose") 
	@Virtual(11) 
	public void getDeviceToAbsoluteTrackingPose(IntValuedEnum<TrackingUniverseOrigin > eOrigin, float fPredictedSecondsToPhotonsFromNow, Pointer<openvr_api.TrackedDevicePose_t > pTrackedDevicePoseArray, int unTrackedDevicePoseArrayCount) {
		getDeviceToAbsoluteTrackingPose((int)eOrigin.value(), fPredictedSecondsToPhotonsFromNow, Pointer.getPeer(pTrackedDevicePoseArray), unTrackedDevicePoseArrayCount);
	}
	@Name("GetDeviceToAbsoluteTrackingPose") 
	@Virtual(11) 
	protected native void getDeviceToAbsoluteTrackingPose(int eOrigin, float fPredictedSecondsToPhotonsFromNow, @Ptr long pTrackedDevicePoseArray, int unTrackedDevicePoseArrayCount);
	/**
	 * Original signature : <code>void ResetSeatedZeroPose()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:832</i>
	 */
	@Name("ResetSeatedZeroPose") 
	@Virtual(12) 
	public native void resetSeatedZeroPose();
	/**
	 * Original signature : <code>HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:840</i>
	 */
	@Name("GetSeatedZeroPoseToStandingAbsoluteTrackingPose") 
	@Virtual(13) 
	public native HmdMatrix34_t getSeatedZeroPoseToStandingAbsoluteTrackingPose();
	/**
	 * Original signature : <code>bool LoadRenderModel(const char*, RenderModel_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:858</i>
	 */
	@Name("LoadRenderModel") 
	@Virtual(14) 
	public boolean loadRenderModel(Pointer<Byte > pchRenderModelName, Pointer<RenderModel_t > pRenderModel) {
		return loadRenderModel(Pointer.getPeer(pchRenderModelName), Pointer.getPeer(pRenderModel));
	}
	@Name("LoadRenderModel") 
	@Virtual(14) 
	protected native boolean loadRenderModel(@Ptr long pchRenderModelName, @Ptr long pRenderModel);
	/**
	 * Original signature : <code>void FreeRenderModel(RenderModel_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:862</i>
	 */
	@Name("FreeRenderModel") 
	@Virtual(15) 
	public void freeRenderModel(Pointer<RenderModel_t > pRenderModel) {
		freeRenderModel(Pointer.getPeer(pRenderModel));
	}
	@Name("FreeRenderModel") 
	@Virtual(15) 
	protected native void freeRenderModel(@Ptr long pRenderModel);
	/**
	 * Original signature : <code>TrackedDeviceClass GetTrackedDeviceClass(vr::TrackedDeviceIndex_t)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:875</i>
	 */
	@Name("GetTrackedDeviceClass") 
	@Virtual(16) 
	public IntValuedEnum<TrackedDeviceClass > getTrackedDeviceClass(Pointer<TrackedDeviceIndex_t> unDeviceIndex) {
		return FlagSet.fromValue(getTrackedDeviceClass(Pointer.getPeer(unDeviceIndex)), TrackedDeviceClass.class);
	}
	@Name("GetTrackedDeviceClass") 
	@Virtual(16) 
	protected native int getTrackedDeviceClass(@Ptr long unDeviceIndex);
	/**
	 * Original signature : <code>bool IsTrackedDeviceConnected(vr::TrackedDeviceIndex_t)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:878</i>
	 */
	@Name("IsTrackedDeviceConnected") 
	@Virtual(17) 
	public boolean isTrackedDeviceConnected(Pointer<TrackedDeviceIndex_t> unDeviceIndex) {
		return isTrackedDeviceConnected(Pointer.getPeer(unDeviceIndex));
	}
	@Name("IsTrackedDeviceConnected") 
	@Virtual(17) 
	protected native boolean isTrackedDeviceConnected(@Ptr long unDeviceIndex);
	/**
	 * Original signature : <code>bool GetBoolTrackedDeviceProperty(vr::TrackedDeviceIndex_t, TrackedDeviceProperty, TrackedPropertyError*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:881</i>
	 */
	@Name("GetBoolTrackedDeviceProperty") 
	@Virtual(18) 
	public boolean getBoolTrackedDeviceProperty(Pointer<TrackedDeviceIndex_t> unDeviceIndex, IntValuedEnum<TrackedDeviceProperty > prop, Pointer<IntValuedEnum<TrackedPropertyError > > pError) {
		return getBoolTrackedDeviceProperty(Pointer.getPeer(unDeviceIndex), (int)prop.value(), Pointer.getPeer(pError));
	}
	@Name("GetBoolTrackedDeviceProperty") 
	@Virtual(18) 
	protected native boolean getBoolTrackedDeviceProperty(@Ptr long unDeviceIndex, int prop, @Ptr long pError);
	/**
	 * Original signature : <code>float GetFloatTrackedDeviceProperty(vr::TrackedDeviceIndex_t, TrackedDeviceProperty, TrackedPropertyError*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:884</i>
	 */
	@Name("GetFloatTrackedDeviceProperty") 
	@Virtual(19) 
	public float getFloatTrackedDeviceProperty(Pointer<TrackedDeviceIndex_t> unDeviceIndex, IntValuedEnum<TrackedDeviceProperty > prop, Pointer<IntValuedEnum<TrackedPropertyError > > pError) {
		return getFloatTrackedDeviceProperty(Pointer.getPeer(unDeviceIndex), (int)prop.value(), Pointer.getPeer(pError));
	}
	@Name("GetFloatTrackedDeviceProperty") 
	@Virtual(19) 
	protected native float getFloatTrackedDeviceProperty(@Ptr long unDeviceIndex, int prop, @Ptr long pError);
	/**
	 * Original signature : <code>int32_t GetInt32TrackedDeviceProperty(vr::TrackedDeviceIndex_t, TrackedDeviceProperty, TrackedPropertyError*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:887</i>
	 */
	@Name("GetInt32TrackedDeviceProperty") 
	@Virtual(20) 
	public int getInt32TrackedDeviceProperty(Pointer<TrackedDeviceIndex_t> unDeviceIndex, IntValuedEnum<TrackedDeviceProperty > prop, Pointer<IntValuedEnum<TrackedPropertyError > > pError) {
		return getInt32TrackedDeviceProperty(Pointer.getPeer(unDeviceIndex), (int)prop.value(), Pointer.getPeer(pError));
	}
	@Name("GetInt32TrackedDeviceProperty") 
	@Virtual(20) 
	protected native int getInt32TrackedDeviceProperty(@Ptr long unDeviceIndex, int prop, @Ptr long pError);
	/**
	 * Original signature : <code>uint64_t GetUint64TrackedDeviceProperty(vr::TrackedDeviceIndex_t, TrackedDeviceProperty, TrackedPropertyError*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:890</i>
	 */
	@Name("GetUint64TrackedDeviceProperty") 
	@Virtual(21) 
	public long getUint64TrackedDeviceProperty(Pointer<TrackedDeviceIndex_t> unDeviceIndex, IntValuedEnum<TrackedDeviceProperty > prop, Pointer<IntValuedEnum<TrackedPropertyError > > pError) {
		return getUint64TrackedDeviceProperty(Pointer.getPeer(unDeviceIndex), (int)prop.value(), Pointer.getPeer(pError));
	}
	@Name("GetUint64TrackedDeviceProperty") 
	@Virtual(21) 
	protected native long getUint64TrackedDeviceProperty(@Ptr long unDeviceIndex, int prop, @Ptr long pError);
	/**
	 * Original signature : <code>HmdMatrix34_t GetMatrix34TrackedDeviceProperty(vr::TrackedDeviceIndex_t, TrackedDeviceProperty, TrackedPropertyError*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:893</i>
	 */
	@Name("GetMatrix34TrackedDeviceProperty") 
	@Virtual(22) 
	public HmdMatrix34_t getMatrix34TrackedDeviceProperty(Pointer<TrackedDeviceIndex_t> unDeviceIndex, IntValuedEnum<TrackedDeviceProperty > prop, Pointer<IntValuedEnum<TrackedPropertyError > > pError) {
		return getMatrix34TrackedDeviceProperty(Pointer.getPeer(unDeviceIndex), (int)prop.value(), Pointer.getPeer(pError));
	}
	@Name("GetMatrix34TrackedDeviceProperty") 
	@Virtual(22) 
	protected native HmdMatrix34_t getMatrix34TrackedDeviceProperty(@Ptr long unDeviceIndex, int prop, @Ptr long pError);
	/**
	 * Original signature : <code>uint32_t GetStringTrackedDeviceProperty(vr::TrackedDeviceIndex_t, TrackedDeviceProperty, char*, uint32_t, TrackedPropertyError*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:898</i>
	 */
	@Name("GetStringTrackedDeviceProperty") 
	@Virtual(23) 
	public int getStringTrackedDeviceProperty(Pointer<TrackedDeviceIndex_t> unDeviceIndex, IntValuedEnum<TrackedDeviceProperty > prop, Pointer<Byte > pchValue, int unBufferSize, Pointer<IntValuedEnum<TrackedPropertyError > > pError) {
		return getStringTrackedDeviceProperty(Pointer.getPeer(unDeviceIndex), (int)prop.value(), Pointer.getPeer(pchValue), unBufferSize, Pointer.getPeer(pError));
	}
	@Name("GetStringTrackedDeviceProperty") 
	@Virtual(23) 
	protected native int getStringTrackedDeviceProperty(@Ptr long unDeviceIndex, int prop, @Ptr long pchValue, int unBufferSize, @Ptr long pError);
	/**
	 * Original signature : <code>char* GetPropErrorNameFromEnum(TrackedPropertyError)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:902</i>
	 */
	@Name("GetPropErrorNameFromEnum") 
	@Virtual(24) 
	public Pointer<Byte > getPropErrorNameFromEnum(IntValuedEnum<TrackedPropertyError > error) {
		return (Pointer)Pointer.pointerToAddress(getPropErrorNameFromEnum((int)error.value()), Byte.class);
	}
	@Name("GetPropErrorNameFromEnum") 
	@Ptr 
	@Virtual(24) 
	protected native long getPropErrorNameFromEnum(int error);
	/**
	 * Original signature : <code>bool PollNextEvent(VREvent_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:910</i>
	 */
	@Name("PollNextEvent") 
	@Virtual(25) 
	public boolean pollNextEvent(Pointer<openvr_api.VREvent_t > pEvent) {
		return pollNextEvent(Pointer.getPeer(pEvent));
	}
	@Name("PollNextEvent") 
	@Virtual(25) 
	protected native boolean pollNextEvent(@Ptr long pEvent);
	/**
	 * Original signature : <code>bool PollNextEventWithPose(TrackingUniverseOrigin, vr::VREvent_t*, vr::TrackedDevicePose_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:915</i>
	 */
	@Name("PollNextEventWithPose") 
	@Virtual(26) 
	public boolean pollNextEventWithPose(IntValuedEnum<TrackingUniverseOrigin > eOrigin, Pointer<VREvent_t > pEvent, Pointer<TrackedDevicePose_t > pTrackedDevicePose) {
		return pollNextEventWithPose((int)eOrigin.value(), Pointer.getPeer(pEvent), Pointer.getPeer(pTrackedDevicePose));
	}
	@Name("PollNextEventWithPose") 
	@Virtual(26) 
	protected native boolean pollNextEventWithPose(int eOrigin, @Ptr long pEvent, @Ptr long pTrackedDevicePose);
	/**
	 * Original signature : <code>char* GetEventTypeNameFromEnum(EVREventType)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:918</i>
	 */
	@Name("GetEventTypeNameFromEnum") 
	@Virtual(27) 
	public Pointer<Byte > getEventTypeNameFromEnum(IntValuedEnum<EVREventType > eType) {
		return (Pointer)Pointer.pointerToAddress(getEventTypeNameFromEnum((int)eType.value()), Byte.class);
	}
	@Name("GetEventTypeNameFromEnum") 
	@Ptr 
	@Virtual(27) 
	protected native long getEventTypeNameFromEnum(int eType);
	/**
	 * Original signature : <code>HiddenAreaMesh_t GetHiddenAreaMesh(Hmd_Eye)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:930</i>
	 */
	@Name("GetHiddenAreaMesh") 
	@Virtual(28) 
	public HiddenAreaMesh_t getHiddenAreaMesh(IntValuedEnum<Hmd_Eye > eEye) {
		return getHiddenAreaMesh((int)eEye.value());
	}
	@Name("GetHiddenAreaMesh") 
	@Virtual(28) 
	protected native HiddenAreaMesh_t getHiddenAreaMesh(int eEye);
	/**
	 * Original signature : <code>bool GetControllerState(vr::TrackedDeviceIndex_t, vr::VRControllerState_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:939</i>
	 */
	@Name("GetControllerState") 
	@Virtual(29) 
	public boolean getControllerState(Pointer<TrackedDeviceIndex_t> unControllerDeviceIndex, Pointer<VRControllerState_t > pControllerState) {
		return getControllerState(Pointer.getPeer(unControllerDeviceIndex), Pointer.getPeer(pControllerState));
	}
	@Name("GetControllerState") 
	@Virtual(29) 
	protected native boolean getControllerState(@Ptr long unControllerDeviceIndex, @Ptr long pControllerState);
	/**
	 * Original signature : <code>bool GetControllerStateWithPose(TrackingUniverseOrigin, vr::TrackedDeviceIndex_t, vr::VRControllerState_t*, TrackedDevicePose_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:944</i>
	 */
	@Name("GetControllerStateWithPose") 
	@Virtual(30) 
	public boolean getControllerStateWithPose(IntValuedEnum<TrackingUniverseOrigin > eOrigin, Pointer<TrackedDeviceIndex_t> unControllerDeviceIndex, Pointer<VRControllerState_t > pControllerState, Pointer<openvr_api.TrackedDevicePose_t > pTrackedDevicePose) {
		return getControllerStateWithPose((int)eOrigin.value(), Pointer.getPeer(unControllerDeviceIndex), Pointer.getPeer(pControllerState), Pointer.getPeer(pTrackedDevicePose));
	}
	@Name("GetControllerStateWithPose") 
	@Virtual(30) 
	protected native boolean getControllerStateWithPose(int eOrigin, @Ptr long unControllerDeviceIndex, @Ptr long pControllerState, @Ptr long pTrackedDevicePose);
	/**
	 * Original signature : <code>void TriggerHapticPulse(vr::TrackedDeviceIndex_t, uint32_t, unsigned short)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:948</i>
	 */
	@Name("TriggerHapticPulse") 
	@Virtual(31) 
	public void triggerHapticPulse(Pointer<TrackedDeviceIndex_t> unControllerDeviceIndex, int unAxisId, short usDurationMicroSec) {
		triggerHapticPulse(Pointer.getPeer(unControllerDeviceIndex), unAxisId, usDurationMicroSec);
	}
	@Name("TriggerHapticPulse") 
	@Virtual(31) 
	protected native void triggerHapticPulse(@Ptr long unControllerDeviceIndex, int unAxisId, short usDurationMicroSec);
	/**
	 * Original signature : <code>char* GetButtonIdNameFromEnum(EVRButtonId)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:951</i>
	 */
	@Name("GetButtonIdNameFromEnum") 
	@Virtual(32) 
	public Pointer<Byte > getButtonIdNameFromEnum(IntValuedEnum<EVRButtonId > eButtonId) {
		return (Pointer)Pointer.pointerToAddress(getButtonIdNameFromEnum((int)eButtonId.value()), Byte.class);
	}
	@Name("GetButtonIdNameFromEnum") 
	@Ptr 
	@Virtual(32) 
	protected native long getButtonIdNameFromEnum(int eButtonId);
	/**
	 * Original signature : <code>char* GetControllerAxisTypeNameFromEnum(EVRControllerAxisType)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:954</i>
	 */
	@Name("GetControllerAxisTypeNameFromEnum") 
	@Virtual(33) 
	public Pointer<Byte > getControllerAxisTypeNameFromEnum(IntValuedEnum<EVRControllerAxisType > eAxisType) {
		return (Pointer)Pointer.pointerToAddress(getControllerAxisTypeNameFromEnum((int)eAxisType.value()), Byte.class);
	}
	@Name("GetControllerAxisTypeNameFromEnum") 
	@Ptr 
	@Virtual(33) 
	protected native long getControllerAxisTypeNameFromEnum(int eAxisType);
	/**
	 * Original signature : <code>bool HandleControllerOverlayInteractionAsMouse(const vr::Compositor_OverlaySettings&, vr::HmdVector2_t, vr::HmdVector2_t, vr::TrackedDeviceIndex_t, vr::EVRControllerEventOutputType)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:962</i>
	 */
	@Name("HandleControllerOverlayInteractionAsMouse") 
	@Virtual(34) 
	public boolean handleControllerOverlayInteractionAsMouse(Pointer<Compositor_OverlaySettings > overlaySettings, Pointer<HmdVector2_t> vecWindowClientPositionOnScreen, Pointer<HmdVector2_t> vecWindowClientSize, Pointer<TrackedDeviceIndex_t> unControllerDeviceIndex, Pointer<EVRControllerEventOutputType> eOutputType) {
		return handleControllerOverlayInteractionAsMouse(Pointer.getPeer(overlaySettings), Pointer.getPeer(vecWindowClientPositionOnScreen), Pointer.getPeer(vecWindowClientSize), Pointer.getPeer(unControllerDeviceIndex), Pointer.getPeer(eOutputType));
	}
	@Name("HandleControllerOverlayInteractionAsMouse") 
	@Virtual(34) 
	protected native boolean handleControllerOverlayInteractionAsMouse(@Ptr long overlaySettings, @Ptr long vecWindowClientPositionOnScreen, @Ptr long vecWindowClientSize, @Ptr long unControllerDeviceIndex, @Ptr long eOutputType);
	/**
	 * Original signature : <code>bool CaptureInputFocus()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:971</i>
	 */
	@Name("CaptureInputFocus") 
	@Virtual(35) 
	public native boolean captureInputFocus();
	/**
	 * Original signature : <code>void ReleaseInputFocus()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:975</i>
	 */
	@Name("ReleaseInputFocus") 
	@Virtual(36) 
	public native void releaseInputFocus();
	/**
	 * Original signature : <code>bool IsInputFocusCapturedByAnotherProcess()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:978</i>
	 */
	@Name("IsInputFocusCapturedByAnotherProcess") 
	@Virtual(37) 
	public native boolean isInputFocusCapturedByAnotherProcess();
	public IVRSystem() {
		super();
	}
	public IVRSystem(Pointer pointer) {
		super(pointer);
	}
}
