package openvr_api;
import openvr_api.IOpenvr_api.ChaperoneCalibrationState;
import org.bridj.BridJ;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Namespace;
import org.bridj.ann.Ptr;
import org.bridj.ann.Virtual;
import org.bridj.cpp.CPPObject;
/**
 * HIGH LEVEL TRACKING SPACE ASSUMPTIONS:<br>
 * 0,0,0 is the preferred standing area center.<br>
 * 0Y is the floor height.<br>
 * -Z is the preferred forward facing direction.<br>
 * <i>native declaration : /usr/include/stdint.h:1041</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Name("IVRChaperone") 
@Namespace("vr") 
@Library("openvr_api") 
public class IVRChaperone extends CPPObject {
	static {
		BridJ.register();
	}
	/**
	 * Original signature : <code>ChaperoneCalibrationState GetCalibrationState()</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1046</i>
	 */
	@Name("GetCalibrationState") 
	@Virtual(0) 
	public IntValuedEnum<ChaperoneCalibrationState > getCalibrationState() {
		return FlagSet.fromValue(getCalibrationState$2(), ChaperoneCalibrationState.class);
	}
	@Name("GetCalibrationState") 
	@Virtual(0) 
	protected native int getCalibrationState$2();
	/**
	 * Original signature : <code>bool GetSoftBoundsInfo(ChaperoneSoftBoundsInfo_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1049</i>
	 */
	@Name("GetSoftBoundsInfo") 
	@Virtual(1) 
	public boolean getSoftBoundsInfo(Pointer<ChaperoneSoftBoundsInfo_t > pInfo) {
		return getSoftBoundsInfo(Pointer.getPeer(pInfo));
	}
	@Name("GetSoftBoundsInfo") 
	@Virtual(1) 
	protected native boolean getSoftBoundsInfo(@Ptr long pInfo);
	/**
	 * Original signature : <code>bool GetHardBoundsInfo(HmdQuad_t*, uint32_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1052</i>
	 */
	@Name("GetHardBoundsInfo") 
	@Virtual(2) 
	public boolean getHardBoundsInfo(Pointer<HmdQuad_t > pQuadsBuffer, Pointer<Integer > punQuadsCount) {
		return getHardBoundsInfo(Pointer.getPeer(pQuadsBuffer), Pointer.getPeer(punQuadsCount));
	}
	@Name("GetHardBoundsInfo") 
	@Virtual(2) 
	protected native boolean getHardBoundsInfo(@Ptr long pQuadsBuffer, @Ptr long punQuadsCount);
	/**
	 * Original signature : <code>bool GetSeatedBoundsInfo(ChaperoneSeatedBoundsInfo_t*)</code><br>
	 * <i>native declaration : /usr/include/stdint.h:1055</i>
	 */
	@Name("GetSeatedBoundsInfo") 
	@Virtual(3) 
	public boolean getSeatedBoundsInfo(Pointer<ChaperoneSeatedBoundsInfo_t > pInfo) {
		return getSeatedBoundsInfo(Pointer.getPeer(pInfo));
	}
	@Name("GetSeatedBoundsInfo") 
	@Virtual(3) 
	protected native boolean getSeatedBoundsInfo(@Ptr long pInfo);
	public IVRChaperone() {
		super();
	}
	public IVRChaperone(Pointer pointer) {
		super(pointer);
	}
}
