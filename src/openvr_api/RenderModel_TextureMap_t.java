package openvr_api;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Namespace;
/**
 * A texture map for use on a render model<br>
 * <i>native declaration : /usr/include/stdint.h:482</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Name("RenderModel_TextureMap_t") 
@Namespace("vr") 
@Library("openvr_api") 
public class RenderModel_TextureMap_t extends StructObject {
	static {
		BridJ.register();
	}
	/** width and height of the texture map in pixels */
	@Field(0) 
	public short unWidth() {
		return this.io.getShortField(this, 0);
	}
	/** width and height of the texture map in pixels */
	@Field(0) 
	public RenderModel_TextureMap_t unWidth(short unWidth) {
		this.io.setShortField(this, 0, unWidth);
		return this;
	}
	/** width and height of the texture map in pixels */
	@Field(1) 
	public short unHeight() {
		return this.io.getShortField(this, 1);
	}
	/** width and height of the texture map in pixels */
	@Field(1) 
	public RenderModel_TextureMap_t unHeight(short unHeight) {
		this.io.setShortField(this, 1, unHeight);
		return this;
	}
	/**
	 * Map texture data. All textures are RGBA with 8 bits per channel per pixel. Data size is width * height * 4ub<br>
	 * C type : const uint8_t*
	 */
	@Field(2) 
	public Pointer<Byte > rubTextureMapData() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * Map texture data. All textures are RGBA with 8 bits per channel per pixel. Data size is width * height * 4ub<br>
	 * C type : const uint8_t*
	 */
	@Field(2) 
	public RenderModel_TextureMap_t rubTextureMapData(Pointer<Byte > rubTextureMapData) {
		this.io.setPointerField(this, 2, rubTextureMapData);
		return this;
	}
	public RenderModel_TextureMap_t() {
		super();
	}
	public RenderModel_TextureMap_t(Pointer pointer) {
		super(pointer);
	}
}
